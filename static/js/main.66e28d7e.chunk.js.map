{"version":3,"sources":["logo.svg","components/Navbar.js","components/Textform.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Navbar","props","React","createElement","Fragment","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","placeholder","class","onClick","togglepurple","toggleyellow","toggleorange","togglegreen","toggleMode","for","defaultProps","aboutText","Textform","text","setText","useState","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","Handleupclick","newText","toUpperCase","Handleloclick","toLowerCase","HandleClearClick","handleCopy","navigator","clipboard","writeText","HandleExtraSpace","newtext","split","join","length","About","myStyle","setmyStyle","border","btntext","setBtnText","data-bs-parent","toggleStyle","Alert","alert","msg","data-bs-dismiss","App","setMode","setAlert","showAlert","message","setTimeout","document","body","setInterval","Infinity","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.66e28d7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react'\r\nimport propTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nfunction Navbar(props) {\r\n\r\n  \r\n \r\n  return (\r\n    <>\r\n\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode}  bg-${props.mode}\r\n      \r\n      `} >\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" aria-current=\"page\"  href=\"/\" >Home</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"/about\">About us</a>\r\n                </li>\r\n                \r\n              </ul>\r\n        \r\n               <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n              <div class=\"form-check form-switch\">\r\n                <div className=\"box\"id='box1' onClick={props.togglepurple}></div>\r\n                <div className=\"box\"id='box2' onClick={props.toggleyellow}></div>\r\n                <div className=\"box\"id='box3' onClick={props.toggleorange}></div>\r\n                <div className=\"box\"id='box4' onClick={props.togglegreen}></div>\r\n              \r\n              </div>\r\n            </form> \r\n              <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                <input class=\"form-check-input my-2 mx-2\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">{props.mode}</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  aboutText: propTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: ' Set title here',\r\n  aboutText: 'about text here'\r\n}\r\n\r\nexport default Navbar\r\n","// import React from 'react'\r\nimport React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    const Handleupclick = () => {\r\n        console.log(\"Upper case was clicked\" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n    const Handleloclick = () => {\r\n        console.log(\"Upper case was clicked\" + text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n    const Handleonchange = (event) => {\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const HandleClearClick = ()=>{\r\n        let newtext = ''\r\n        setText(newtext)\r\n    }\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n      }\r\n      const HandleExtraSpace =()=>{\r\n        let newtext = text.split(/[  ]+/);\r\n        setText(newtext.join(\" \"))\r\n      }\r\n    const [text, setText] = useState('Enter text here');\r\n    // setText(\"Enter here\")\r\n    return (\r\n        <>\r\n            <div className='container' style={{color : props.mode === 'dark'?'white':'black'}}>\r\n                <h2>{props.heading }</h2>\r\n                <div className=\"mb-3\"  >\r\n                    <label for=\"exampleFormControlTextarea1\" class=\"form-label\"></label>\r\n                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"15\" value={text} onChange={Handleonchange} style={{backgroundColor: props.mode === 'dark'?'grey':'light',color : props.mode === 'dark'?'white':'light'}} ></textarea>\r\n                    <button className=' btn btn-success my-3'  onClick={Handleupclick}>Convert to Uppercase</button>\r\n                    <button className=' btn btn-success mx-3'  onClick={Handleloclick}>Convert to Lowercase</button>\r\n                    <button className=' btn btn-success mx-3'  onClick={HandleClearClick}>Clear Text</button>\r\n                    <button className=' btn btn-success mx-3'  onClick={handleCopy}>Copy text</button>\r\n                    <button className=' btn btn-success mx-3'  onClick={HandleExtraSpace}>Remove Space</button>\r\n\r\n                </div>\r\n                <div className=\"container my-3\">\r\n                    <h2>Your text Summary</h2>\r\n                    <p>{text.split(\" \").length} Words  {text.length}</p>\r\n                    <p>{0.008*text.split(\" \").length} Minutes</p>\r\n                    <h2>Preview</h2>\r\n                    {/* <p>{text}</p> */}\r\n                    <p>{text.length>0?text:'Enter something'}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle,setmyStyle]= useState({\r\n        color:'black',\r\n        backgroundColor:'white',\r\n        border:'1.5px solid white'\r\n    })\r\n\r\n    const [btntext,setBtnText] = useState('Enable Dark mode ')\r\n\r\n   const toggleStyle=()=>{\r\n        if(myStyle.color === 'black'){\r\n            setmyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText('Enable light mode')\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText('Enable dark mode')\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <div className='container' style={myStyle}>\r\n                <h2>About Us</h2>\r\n\r\n                <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                    <div className=\"accordion-item\" >\r\n                        <h2 className=\"accordion-header\">\r\n                            <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n                            <div className=\"accordion-body\" >\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" >\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" >\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" >\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                <button type=\"button\" className=\"btn btn-primary my-3\" onClick={toggleStyle}>{btntext}</button>\r\n                \r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n        <strong>{props.alert.type}</strong> {props.alert.msg}\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n      </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar.js';\nimport Textform from './components/Textform.js';\nimport About from './components/About.js';\nimport { useState } from 'react';\nimport Alert from './components/Alert.js';\nimport React from 'react';\n\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Routes,\n//   Link\n// } from \"react-router-dom\";\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState('null');\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = 'skyblue'\n\n      showAlert(\"Success , dark  mode has been enable\")\n      document.title = 'textutils- dark mode'\n      setInterval(() => {\n        document.title = 'textutils is superb'\n      }, 2000, Infinity);\n      setInterval(() => {\n        document.title = 'textutils is amazing'\n      }, 1500, Infinity);\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Success,light mode has been enable\")\n      document.title = 'textutils- light mode'\n    }\n  }\n  const togglepurple = () => {\n    if (mode === 'light') {\n      document.body.style.backgroundColor = 'purple'\n    }\n    else {\n      document.body.style.backgroundColor = 'purple'\n    }\n  }\n  const toggleyellow = () => {\n    if (mode === 'light') {\n      document.body.style.backgroundColor = 'yellow'\n    }\n    else {\n      document.body.style.backgroundColor = 'yellow'\n    }\n  }\n  const toggleorange = () => {\n    if (mode === 'light') {\n      document.body.style.backgroundColor = 'orange'\n    }\n    else {\n      document.body.style.backgroundColor = 'orange'\n    }\n  }\n  const togglegreen = () => {\n    if (mode === 'light') {\n      document.body.style.backgroundColor = 'lightgreen'\n    }\n    else {\n      document.body.style.backgroundColor = 'lightgreen'\n    }\n  }\n\n\n  setTimeout(() => {\n    showAlert()\n  }, 3000);\n  return (\n\n    <>\n      {/* <Router> */}\n        <Navbar title=\"Textutils\" aboutText=\"text\" mode={mode} toggleMode={toggleMode} togglepurple={togglepurple} toggleyellow={toggleyellow} toggleorange={toggleorange} togglegreen={togglegreen} />\n        <Alert alert={alert} showAlert={showAlert} />\n       {/* c:\\Documents\\react app <Routes> */}\n          {/* <Route exact path=\"/about\" element={} /> */}\n          <div className=\"container my-3\">\n                <Textform heading=\"Enter good thoughts\" text=\"text\" mode={mode} showAlert={showAlert} />\n              </div>\n          <About />\n          {/* <Route exact path=\"/\" element={} />\n        </Routes>\n        </Router> */}\n        </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}